legend.text = element_text(size=8)) +
geom_histogram(aes(x=data_1), bins=30, alpha=0.4, fill='lawngreen') +
geom_histogram(aes(x=data_2), bins=30, alpha=0.4, fill='lawngreen') +
geom_histogram(aes(x=data_3), bins=30, alpha=0.4, fill='lawngreen') +
geom_vline(aes(xintercept=pop_mean, colour=simulation_mean), size=1) +
geom_vline(aes(xintercept=CI90[2], colour=ninety_pct), size=1) +
geom_vline(aes(xintercept=CI90[1], colour=ninety_pct), size=1) +
geom_vline(aes(xintercept=CI95[2], colour=ninety_five_pct), size=1) +
geom_vline(aes(xintercept=CI95[1], colour=ninety_five_pct), size=1) +
geom_vline(aes(xintercept=CI99[2], colour=ninety_nine_pct), size=1) +
geom_vline(aes(xintercept=CI99[1], colour=ninety_nine_pct), size=1) +
scale_x_continuous(limits=c(-60000,60000)) +
xlab("P&L(USD)") +
ylab("") +
labs(colour = 'Confidence Level')
## Plot
ggplot() +
theme(panel.background = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.key = element_blank(),
legend.position = c(.85, .7),
legend.text = element_text(size=10)) +
geom_histogram(aes(x=data_1), bins=30, alpha=0.4, fill='lawngreen') +
geom_histogram(aes(x=data_2), bins=30, alpha=0.4, fill='lawngreen') +
geom_histogram(aes(x=data_3), bins=30, alpha=0.4, fill='lawngreen') +
geom_vline(aes(xintercept=pop_mean, colour=simulation_mean), size=1) +
geom_vline(aes(xintercept=CI90[2], colour=ninety_pct), size=1) +
geom_vline(aes(xintercept=CI90[1], colour=ninety_pct), size=1) +
geom_vline(aes(xintercept=CI95[2], colour=ninety_five_pct), size=1) +
geom_vline(aes(xintercept=CI95[1], colour=ninety_five_pct), size=1) +
geom_vline(aes(xintercept=CI99[2], colour=ninety_nine_pct), size=1) +
geom_vline(aes(xintercept=CI99[1], colour=ninety_nine_pct), size=1) +
scale_x_continuous(limits=c(-60000,60000)) +
xlab("P&L(USD)") +
ylab("") +
labs(colour = 'Confidence Level')
## Plot
ggplot() +
theme(panel.background = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.key = element_blank(),
legend.position = c(.85, .7),
legend.text = element_text(size=8)) +
geom_histogram(aes(x=data_1), bins=30, alpha=0.4, fill='lawngreen') +
geom_histogram(aes(x=data_2), bins=30, alpha=0.4, fill='lawngreen') +
geom_histogram(aes(x=data_3), bins=30, alpha=0.4, fill='lawngreen') +
geom_vline(aes(xintercept=pop_mean, colour=simulation_mean), size=1) +
geom_vline(aes(xintercept=CI90[2], colour=ninety_pct), size=1) +
geom_vline(aes(xintercept=CI90[1], colour=ninety_pct), size=1) +
geom_vline(aes(xintercept=CI95[2], colour=ninety_five_pct), size=1) +
geom_vline(aes(xintercept=CI95[1], colour=ninety_five_pct), size=1) +
geom_vline(aes(xintercept=CI99[2], colour=ninety_nine_pct), size=1) +
geom_vline(aes(xintercept=CI99[1], colour=ninety_nine_pct), size=1) +
scale_x_continuous(limits=c(-60000,60000)) +
xlab("P&L(USD)") +
ylab("") +
labs(colour = 'Confidence Level')
## Create data for graph
moments <- c(pop_mean, pop_sd ** 2, pop_skew, pop_kurt)
data_1 <- rpearson(2000, moments = moments)
data_2 <- rpearson(2000, moments = moments)
data_3 <- rpearson(2000, moments = moments)
## Plot
ggplot() +
theme(panel.background = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.key = element_blank(),
legend.position = c(.85, .7),
legend.text = element_text(size=8)) +
geom_histogram(aes(x=data_1), bins=30, alpha=0.4, fill='lawngreen') +
geom_histogram(aes(x=data_2), bins=30, alpha=0.4, fill='lawngreen') +
geom_histogram(aes(x=data_3), bins=30, alpha=0.4, fill='lawngreen') +
geom_vline(aes(xintercept=pop_mean, colour=simulation_mean), size=1) +
geom_vline(aes(xintercept=CI90[2], colour=ninety_pct), size=1) +
geom_vline(aes(xintercept=CI90[1], colour=ninety_pct), size=1) +
geom_vline(aes(xintercept=CI95[2], colour=ninety_five_pct), size=1) +
geom_vline(aes(xintercept=CI95[1], colour=ninety_five_pct), size=1) +
geom_vline(aes(xintercept=CI99[2], colour=ninety_nine_pct), size=1) +
geom_vline(aes(xintercept=CI99[1], colour=ninety_nine_pct), size=1) +
scale_x_continuous(limits=c(-60000,60000)) +
xlab("P&L(USD)") +
ylab("") +
labs(colour = 'Confidence Level')
## Plot
ggplot() +
theme(panel.background = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.key = element_blank(),
legend.position = c(.85, .7),
legend.text = element_text(size=8)) +
geom_histogram(aes(x=data_1), bins=30, alpha=0.4, fill='lawngreen') +
geom_histogram(aes(x=data_2), bins=30, alpha=0.4, fill='lawngreen') +
geom_histogram(aes(x=data_3), bins=30, alpha=0.4, fill='lawngreen') +
geom_vline(aes(xintercept=pop_mean, colour=simulation_mean), size=1) +
geom_vline(aes(xintercept=CI90[2], colour=ninety_pct), size=1) +
geom_vline(aes(xintercept=CI90[1], colour=ninety_pct), size=1) +
geom_vline(aes(xintercept=CI95[2], colour=ninety_five_pct), size=1) +
geom_vline(aes(xintercept=CI95[1], colour=ninety_five_pct), size=1) +
geom_vline(aes(xintercept=CI99[2], colour=ninety_nine_pct), size=1) +
geom_vline(aes(xintercept=CI99[1], colour=ninety_nine_pct), size=1) +
scale_x_continuous(limits=c(-60000,60000)) +
xlab("P&L(USD)") +
ylab("") +
labs(colour = 'Confidence Levels')
## Plot
ggplot() +
theme(panel.background = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.key = element_blank(),
legend.position = c(.85, .7),
legend.text = element_text(size=8)) +
geom_histogram(aes(x=data_1), bins=100, alpha=0.4, fill='lawngreen') +
geom_histogram(aes(x=data_2), bins=30, alpha=0.4, fill='lawngreen') +
geom_histogram(aes(x=data_3), bins=30, alpha=0.4, fill='lawngreen') +
geom_vline(aes(xintercept=pop_mean, colour=simulation_mean), size=1) +
geom_vline(aes(xintercept=CI90[2], colour=ninety_pct), size=1) +
geom_vline(aes(xintercept=CI90[1], colour=ninety_pct), size=1) +
geom_vline(aes(xintercept=CI95[2], colour=ninety_five_pct), size=1) +
geom_vline(aes(xintercept=CI95[1], colour=ninety_five_pct), size=1) +
geom_vline(aes(xintercept=CI99[2], colour=ninety_nine_pct), size=1) +
geom_vline(aes(xintercept=CI99[1], colour=ninety_nine_pct), size=1) +
scale_x_continuous(limits=c(-60000,60000)) +
xlab("P&L(USD)") +
ylab("") +
labs(colour = 'Confidence Levels')
## Plot
ggplot() +
theme(panel.background = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.key = element_blank(),
legend.position = c(.85, .7),
legend.text = element_text(size=8)) +
geom_histogram(aes(x=data_1), bins=100, alpha=0.4, fill='lawngreen') +
geom_histogram(aes(x=data_2), bins=100, alpha=0.4, fill='lawngreen') +
geom_histogram(aes(x=data_3), bins=100, alpha=0.4, fill='lawngreen') +
geom_vline(aes(xintercept=pop_mean, colour=simulation_mean), size=1) +
geom_vline(aes(xintercept=CI90[2], colour=ninety_pct), size=1) +
geom_vline(aes(xintercept=CI90[1], colour=ninety_pct), size=1) +
geom_vline(aes(xintercept=CI95[2], colour=ninety_five_pct), size=1) +
geom_vline(aes(xintercept=CI95[1], colour=ninety_five_pct), size=1) +
geom_vline(aes(xintercept=CI99[2], colour=ninety_nine_pct), size=1) +
geom_vline(aes(xintercept=CI99[1], colour=ninety_nine_pct), size=1) +
scale_x_continuous(limits=c(-60000,60000)) +
xlab("P&L(USD)") +
ylab("") +
labs(colour = 'Confidence Levels')
rm(.)
rm()
library(ggplot2)
library(PearsonDS)
## Input data from Bloomberg here
sample_mean <- 256
sample_sd <- 8108
sample_skew <- -.75
sample_kurt <- 14.36
## Calculate CI and create legend labels
CI90 <- c(sample_mean - 1.645 * sample_sd, sample_mean + 1.645 * sample_sd)
CI95 <- c(sample_mean - 1.96 * sample_sd, sample_mean + 1.96 * sample_sd)
CI99 <- c(sample_mean - 2.576 * sample_sd, sample_mean + 2.576 * sample_sd)
ninety_pct <- paste('90%: (', as.character(CI90[1]), ", ", as.character(CI90[2]), ")", sep="")
ninety_five_pct <- paste('95%: (', as.character(CI95[1]), ", ", as.character(CI95[2]), ")", sep="")
ninety_nine_pct <- paste('99%: (', as.character(CI99[1]), ", ", as.character(CI99[2]), ")", sep="")
simulation_mean <- paste('Mean: $', sample_mean, sep = "")
## Create data for graph
moments <- c(sample_mean, sample_sd ** 2, sample_skew, sample_kurt)
data_1 <- rpearson(2000, moments = moments)
data_2 <- rpearson(2000, moments = moments)
data_3 <- rpearson(2000, moments = moments)
## Plot
ggplot() +
theme(panel.background = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.key = element_blank(),
legend.position = c(.85, .7),
legend.text = element_text(size=8)) +
geom_histogram(aes(x=data_1), bins=100, alpha=0.4, fill='lawngreen') +
geom_histogram(aes(x=data_2), bins=100, alpha=0.4, fill='lawngreen') +
geom_histogram(aes(x=data_3), bins=100, alpha=0.4, fill='lawngreen') +
geom_vline(aes(xintercept=sample_mean, colour=simulation_mean), size=1) +
geom_vline(aes(xintercept=CI90[2], colour=ninety_pct), size=1) +
geom_vline(aes(xintercept=CI90[1], colour=ninety_pct), size=1) +
geom_vline(aes(xintercept=CI95[2], colour=ninety_five_pct), size=1) +
geom_vline(aes(xintercept=CI95[1], colour=ninety_five_pct), size=1) +
geom_vline(aes(xintercept=CI99[2], colour=ninety_nine_pct), size=1) +
geom_vline(aes(xintercept=CI99[1], colour=ninety_nine_pct), size=1) +
scale_x_continuous(limits=c(-60000,60000)) +
xlab("P&L(USD)") +
ylab("") +
labs(colour = 'Confidence Levels')
data_1 <- rpearson(2000, moments = moments)
data_2 <- rpearson(2000, moments = moments)
data_3 <- rpearson(2000, moments = moments)
## Plot
ggplot() +
theme(panel.background = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.key = element_blank(),
legend.position = c(.85, .7),
legend.text = element_text(size=8)) +
geom_histogram(aes(x=data_1), bins=100, alpha=0.4, fill='lawngreen') +
geom_histogram(aes(x=data_2), bins=100, alpha=0.4, fill='lawngreen') +
geom_histogram(aes(x=data_3), bins=100, alpha=0.4, fill='lawngreen') +
geom_vline(aes(xintercept=sample_mean, colour=simulation_mean), size=1) +
geom_vline(aes(xintercept=CI90[2], colour=ninety_pct), size=1) +
geom_vline(aes(xintercept=CI90[1], colour=ninety_pct), size=1) +
geom_vline(aes(xintercept=CI95[2], colour=ninety_five_pct), size=1) +
geom_vline(aes(xintercept=CI95[1], colour=ninety_five_pct), size=1) +
geom_vline(aes(xintercept=CI99[2], colour=ninety_nine_pct), size=1) +
geom_vline(aes(xintercept=CI99[1], colour=ninety_nine_pct), size=1) +
scale_x_continuous(limits=c(-60000,60000)) +
xlab("P&L(USD)") +
ylab("") +
labs(colour = 'Confidence Levels')
library(ggplot2)
library(PearsonDS)
## Input data from Bloomberg here
distribution_mean <- 256
distribution_sd <- 8108
distribution_skew <- -.75
distribution_kurt <- 14.36
## Calculate CI and create legend labels
CI90 <- c(distribution_mean - 1.645 * distribution_sd, distribution_mean + 1.645 * distribution_sd)
CI95 <- c(distribution_mean - 1.96 * distribution_sd, distribution_mean + 1.96 * distribution_sd)
CI99 <- c(distribution_mean - 2.576 * distribution_sd, distribution_mean + 2.576 * distribution_sd)
ninety_pct <- paste('90%: (', as.character(CI90[1]), ", ", as.character(CI90[2]), ")", sep="")
ninety_five_pct <- paste('95%: (', as.character(CI95[1]), ", ", as.character(CI95[2]), ")", sep="")
ninety_nine_pct <- paste('99%: (', as.character(CI99[1]), ", ", as.character(CI99[2]), ")", sep="")
simulation_mean <- paste('Mean: $', distribution_mean, sep = "")
## Create data for graph
moments <- c(distribution_mean, distribution_sd ** 2, distribution_skew, distribution_kurt)
data_1 <- rpearson(2000, moments = moments)
data_2 <- rpearson(2000, moments = moments)
data_3 <- rpearson(2000, moments = moments)
## Plot
ggplot() +
theme(panel.background = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.key = element_blank(),
legend.position = c(.85, .7),
legend.text = element_text(size=8)) +
geom_histogram(aes(x=data_1), bins=100, alpha=0.4, fill='lawngreen') +
geom_histogram(aes(x=data_2), bins=100, alpha=0.4, fill='lawngreen') +
geom_histogram(aes(x=data_3), bins=100, alpha=0.4, fill='lawngreen') +
geom_vline(aes(xintercept=distribution_mean, colour=simulation_mean), size=1) +
geom_vline(aes(xintercept=CI90[2], colour=ninety_pct), size=1) +
geom_vline(aes(xintercept=CI90[1], colour=ninety_pct), size=1) +
geom_vline(aes(xintercept=CI95[2], colour=ninety_five_pct), size=1) +
geom_vline(aes(xintercept=CI95[1], colour=ninety_five_pct), size=1) +
geom_vline(aes(xintercept=CI99[2], colour=ninety_nine_pct), size=1) +
geom_vline(aes(xintercept=CI99[1], colour=ninety_nine_pct), size=1) +
scale_x_continuous(limits=c(-60000,60000)) +
xlab("P&L(USD)") +
ylab("") +
labs(colour = 'Confidence Levels')
library(readxl)
Ch05_Q21_Data_File <- read_excel("C:/Users/lchco/Downloads/Ch05_Q21_Data_File.xlsx")
View(Ch05_Q21_Data_File)
View(Ch05_Q21_Data_File)
mean(Ch05_Q21_Data_File$Price)
sd(Ch05_Q21_Data_File$Price)
lower = .25 - 1.96 * sqrt(.25*.75/70)
upper = .25 + 1.96 * sqrt(.25*.75/70)
(2.04-2)/.21
(2.04-2)/(.21/sqrt(55))
2 * pnorm(-abs(1.412609))
?pnorm
2 * pnorm(-abs(1.412609))
2*pt(1.412609, 54, lower.tail = FALSE)
lower <- 0.48 - 1.96 * sqrt(.48(1-.48)/50)
lower <- 0.48 - 1.96 * sqrt(.48*(1-.48)/50)
upper <- 0.48 + 1.96 * sqrt(.48*(1-.48)/50)
test <- (.48-.3)/sqrt(.3*(1-.3)/50)
pnorm(test, lower.tail = FALSE)
?pnorm
test <- (.46-.3)/sqrt(.3*(1-.3)/50)
pnorm(test, lower.tail = FALSE)
.8*.9
.28/.3
52-13
39-13
.5*.05+.0025*.5
.05*.5
.025/.02625
.05*(2/3)+.0025*(1/3)
.05*(2/3)/.034167
library(readxl)
Ch6_Q15_V17_Data_File <- read_excel("C:/Users/lchco/Downloads/Ch6_Q15_V17_Data_File.xlsx")
View(Ch6_Q15_V17_Data_File)
View(Ch6_Q15_V17_Data_File)
lm(price~Sqft+Beds+Baths+Colonial, data = Ch6_Q15_V17_Data_File)
lm(Price~Sqft+Beds+Baths+Colonial, data = Ch6_Q15_V17_Data_File)
summary(lm(formula = Price ~ Sqft + Beds + Baths + Colonial, data = Ch6_Q15_V17_Data_File))
library(readxl)
Ch6_Q28_Data_File <- read_excel("C:/Users/lchco/Downloads/Ch6_Q28_Data_File.xlsx")
View(Ch6_Q28_Data_File)
summary(lm(SAT~Income))
summary(lm(SAT~Income, data = Ch6_Q28_Data_File))
options(scipen = 10)
summary(lm(SAT~Income, data = Ch6_Q28_Data_File))
summary(lm(SAT~GPA, data = Ch6_Q28_Data_File))
summary(lm(SAT~Income+GPA, data = Ch6_Q28_Data_File))
model <- lm(SAT~GPA, data = Ch6_Q28_Data_File)
predict(model)
predict(model, mean(Ch6_Q28_Data_File$GPA))
pnorm(2.5)
1-pnorm(2.5)
?qnorm
qnorm(.25)
qnorm(.5)
180-250
-70/qnorm(.25)
pnorm(320, 250, 103.7822)
pnorm(200, 250, 103.7822)
pnorm(320, 250, 103.7822) - pnorm(280, 250, 103.7822)
qnorm(.2, lower.tail = FALSE)
4/qnorm(.2, lower.tail = FALSE)
(4/qnorm(.2, lower.tail = FALSE))**2
pnorm(9, 5, 4.752732, lower.tail = FALSE)
.65*.35
.2275/100
sqrt(0.00275)
pnorm(0.5, .65, .05244, lower.tail = FALSE)
pnorm(0.7, .65, .05244) - pnorm(0.6, .65, .05244)
pnorm(0.75, .65, .05244, lower.tail = TRUE)
?for
lkjsdf
for (i in c(50:100)) {}
p_x = 0
for (i in c(50:100)) {p_x <- p_x + combn(i-1, 49)*.4**50*.6**(i-50)}
for (i in c(50:100)) {p_x <- p_x + choose(i-1, 49)*.4**50*.6**(i-50)}
p_x = 0
for (i in c(50:100)) {p_x <- p_x + choose(i-1, 49)*.4**50*.6**(i-50)}
1-p_x
cwd
?wd
??working directory
??workingdirectory
getwd
getwd()
setwd("C:/Users/lchcoo/Onedrive/python/eliteteam")
getwd
getwd()
setwd("C:/Users/lchco/OneDrive/Python/eliteteam")
getwd()
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/lchco/OneDrive/Python/eliteteam")
df <- read.csv('data/Trent.csv') ## CHANGE NAME HERE TO GENERATE A REPORT FOR EACH TEAM MEMBER
library(ggplot2)
library(tidyverse)
climb <- df %>%
filter(Flash!=NA)
rm(climb)
?is.na
climb <- df %>%
filter(!is.na(Flash))
climb <- df %>%
select(Date, Grade, Flash, Zone)
filter(!is.na(Flash))
climb <- df %>%
filter(!is.na(Flash))
climb <- df %>%
filter(!is.na(Flash)) %>%
select(Date, Grade, Flash, Zone)
rm(climb)
climb <- df %>%
select(Date, Grade, Flash, Zone) %>%
filter(!is.na(Flash))
summary(climb)
climb
ggplot(data=climb) +
geom_point(aes(x=Date, y=Grade, col=Flash))
ggplot(data=climb) +
geom_point(aes(x=Date, y=Grade, col=Zone))
mfrow(par=c(1,2))
par(mfrow=c(1,2))
ggplot(data=climb) +
geom_point(aes(x=Date, y=Grade, col=Flash))
ggplot(data=climb) +
geom_point(aes(x=Date, y=Grade, col=Zone))
climb <- df %>%
filter(is.na(Flash)) %>%
select(Date, Lift, Weight, Reps)
climb <- df %>%
select(Date, Grade, Flash, Zone) %>%
filter(!is.na(Flash))
par(mfrow=c(1,2))
ggplot(data=climb) +
geom_point(aes(x=Date, y=Grade, col=Flash)) +
labs(title='Sends by Flash')
ggplot(data=climb) +
geom_point(aes(x=Date, y=Grade, col=Zone)) +
labs(title='Sends by Zone')
lift <- df %>%
filter(is.na(Flash)) %>%
select(Date, Lift, Weight, Reps)
unique(lift$Lift)
for (i in unique(lift$Lift)) {
lifti <- lift %>%
filter(Lift==i)
ggplot(data=lifti) +
geom_point(aes(x=Date, y=Weight))
}
length(unique(lift$Lift))
lift <- df %>%
filter(is.na(Flash)) %>%
select(Date, Lift, Weight, Reps)
lift_graphs <- vector('list', length(unique(lift$Lift)))
i <- 0
for (j in unique(lift$Lift)) {
lifti <- lift %>%
filter(Lift==j)
lift_graphs[i] <- ggplot(data=lifti) +
geom_point(aes(x=Date, y=Weight))
}
lift_graphs
i <- 1
for (j in unique(lift$Lift)) {
lifti <- lift %>%
filter(Lift==j)
lift_graphs[i] <- ggplot(data=lifti) +
geom_point(aes(x=Date, y=Weight))
}
i <- 0
for (j in unique(lift$Lift)) {
lifti <- lift %>%
filter(Lift==j)
lift_graphs[i] <- ggplot(data=lifti) +
geom_point(aes(x=Date, y=Weight))
}
lift_graphs
lift_graphs <- vector('list', length(unique(lift$Lift)))
i <- 0
for (j in unique(lift$Lift)) {
lifti <- lift %>%
filter(Lift==j)
lift_graphs[[i]] <- ggplot(data=lifti) +
geom_point(aes(x=Date, y=Weight))
}
lift_graphs
for (j in unique(lift$Lift)) {
lifti <- lift %>%
filter(Lift==j)
lift_graphs[[i]] <- ggplot(data=lifti) +
geom_point(aes(x=Date, y=Weight))
}
?lapply
?seq_len
lift_graphs <- list()
for (j in unique(lift$Lift)) {
lifti <- lift %>%
filter(Lift==j)
p1 <- eval(substitute(
ggplot(data=lifti) +
geom_point(aes(x=Date, y=Weight))
, list(i=i)))
lift_graphs[[i]] <- p1
}
for (j in unique(lift$Lift)) {
lifti <- lift %>%
filter(Lift==j)
p1 <- eval(substitute(
ggplot(data=lifti) +
geom_point(aes(x=Date, y=Weight))
, list(i=i)))
lift_graphs[i] <- p1
}
lift_graphs
for (j in unique(lift$Lift)) {
lifti <- lift %>%
filter(Lift==j)
p1 <- eval(substitute(
ggplot(data=lifti) +
geom_point(aes(x=Date, y=Weight))
, list(i=i)))
print(i)
print(p1)
lift_graphs[i] <- p1
}
i <- 0
for (j in unique(lift$Lift)) {
lifti <- lift %>%
filter(Lift==j)
p1 <- eval(substitute(
ggplot(data=lifti) +
geom_point(aes(x=Date, y=Weight))
, list(i=i)))
print(i)
print(p1)
lift_graphs[i] <- p1
i++
}
for (j in unique(lift$Lift)) {
lifti <- lift %>%
filter(Lift==j)
p1 <- eval(substitute(
ggplot(data=lifti) +
geom_point(aes(x=Date, y=Weight))
, list(i=i)))
print(i)
print(p1)
lift_graphs[i] <- p1
i <- i+1
}
